#! /bin/bash
# oozie-sys.sh needs bash

### BEGIN INIT INFO
# Provides: mapr-oozie
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Enables MapR Oozie server
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

BASEMAPR=${MAPR_HOME:-/opt/mapr}

env=${BASEMAPR}/conf/env.sh
[ -f $env ] && . $env

DESC="Oozie server"
NAME=mapr-oozie
if [ -f "${BASEMAPR}/oozie/oozieversion" ]; then
  VER=$(cat "${BASEMAPR}/oozie/oozieversion")
else
  VER=$(ls -lt ${BASEMAPR}/oozie | grep "oozie-" | head -1 | sed 's/^.*oozie-//' | awk '{print $1}')
fi

OOZIE_START_SCRIPT=$BASEMAPR/oozie/oozie-${VER}/bin/oozie-start.sh
OOZIE_STOP_SCRIPT=$BASEMAPR/oozie/oozie-${VER}/bin/oozie-stop.sh

OOZIE_SYS_SCRIPT=$BASEMAPR/oozie/oozie-${VER}/bin/oozie-sys.sh
OOZIE_STATUS_SCRIPT=$BASEMAPR/oozie/oozie-${VER}/bin/oozie
SCRIPTNAME=/etc/init.d/${NAME}
PID_FILE=$BASEMAPR/oozie/oozie-${VER}/oozie-server/temp/oozie.pid
DAEMON_CONF="$BASEMAPR/conf/daemon.conf"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Read configuration variable file if it is present.
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#Exit if the package is not installed
if [ ! -x "$OOZIE_START_SCRIPT" ]; then
  log_failure_msg "${OOZIE_START_SCRIPT} not found. exiting"
  exit 2;
fi

if [ -e $DAEMON_CONF ]; then
  MAPR_USER=$(awk -F = '$1 == "mapr.daemon.user" { print $2 }' $DAEMON_CONF)
fi
if [ "xxx$MAPR_USER" != "xxx" -a "$MAPR_USER" != "root" ]; then
  MAPR_SHELL="/bin/sh"
  RUN_AS_CMD="su -s $MAPR_SHELL -p $MAPR_USER -c "
  OOZIE_START_SCRIPT="${RUN_AS_CMD} ${OOZIE_START_SCRIPT}"
  OOZIE_STOP_SCRIPT="${RUN_AS_CMD} ${OOZIE_STOP_SCRIPT}"
fi

OUTPUT_FILE=${BASEMAPR}/logs/oozie.log

#
# Function that starts the daemon/service
#
do_start()
{
  echo "********" >>  ${OUTPUT_FILE}
  echo "`date`: starting $DESC" >>  ${OUTPUT_FILE}
  echo "********" >>  ${OUTPUT_FILE}
  ${OOZIE_START_SCRIPT} >> ${OUTPUT_FILE} 2>&1
}

do_stop()
{
  if [ -f ${PID_FILE} ]; then
    pid=`cat ${PID_FILE}`
  else
    pid=""
  fi

  echo "`date`: stopping $DESC" >>  ${OUTPUT_FILE}
  ${OOZIE_STOP_SCRIPT} >> ${OUTPUT_FILE} 2>&1

  if [ "X$pid" != "X" ]; then
    while kill -0 $pid > /dev/null 2>&1; do
      sleep 1;
    done
  fi

}

COMMAND="$1"
ret=0
case ${COMMAND} in
  start)
     [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC"
     do_start "$*"
     ret=$?
     case "$ret" in
       0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
       2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
     esac
     ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC"
    do_stop
    ret=$?
    case "$ret" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    . ${OOZIE_SYS_SCRIPT} >/dev/null 2>&1
    OOZIE_STATUS_SCRIPT="${OOZIE_STATUS_SCRIPT} admin -oozie ${OOZIE_BASE_URL} -status"
    if [ "xxx$MAPR_USER" != "xxx" -a "$MAPR_USER" != "root" ]; then
      $RUN_AS_CMD "${OOZIE_STATUS_SCRIPT}" > /dev/null 2>&1
    else
      ${OOZIE_STATUS_SCRIPT} > /dev/null 2>&1
    fi
    ret=$?
    case "$ret" in
      0) log_success_msg ${DESC} is running ;;
      *) log_failure_msg ${DESC} is not running ;;
    esac
     ;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC"
    do_stop
    case "$ret" in
      0|1)
        do_start "$*"
       case "$ret" in
         0) log_end_msg 0 ;;
         1) log_end_msg 1 ;; # Old process is still running
         *) log_end_msg 1 ;; # Failed to start
       esac
       ;;
    *)
      # Failed to stop
      log_end_msg 1
      ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|}" >&2
    ret=3
    ;;
esac

exit ${ret}
